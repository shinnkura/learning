package main

import (
	"fmt"
	"time"
)

func main() {
	fmt.Println("Hello, World!")
	fmt.Println(time.Now())

	// 明示的な定義
	// var 変数名 型 = 値
	var name string = "John"

	// 暗黙的な定義
	// 型推論
	// 変数名 := 値
	// ※ 関数内でしか定義できない
	i4 := 4
	fmt.Println(name, i4)
}

// コンパイル
// go build -o main main.go

// 実行
// ./main

/*
なぜコンパイルする必要があるのか？

1. ネイティブコードにコンパイルされる
Goはネイティブコードにコンパイルされた上で実行されるので、
一般的なスクリプト言語の実行速度より１０〜１００倍という高いパフォーマンスを発揮する。

2. マルチプラットフォームで動作する
GoはOSやCPUによる実行環境の差を隠蔽してくれる。
この為、実行されるプラットフォームの差に気を配らなくても良い。
各実行環境で動作するプログラムを、１つのコンパイル環境から生成できる、クロスコンパイル機能を備えている。

特にこのクロスコンパイルの恩恵が大きいです。
Goは、1つのソースコードから様々なOS向けのバイナリを生成するクロスコンパイルをサポートしています。

つまり、Mac で .exe ファイルを生成して Windows ユーザにそれを渡せば、受け取った瞬間にすぐに実行できるということ
*/
